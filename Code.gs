// ============================================
// CONFIGURACI√ìN INICIAL - SOMMA CON GEMINI
// ============================================

// IMPORTANTE: Reemplaza estos valores con tus datos reales
const CONFIG = {
  SPREADSHEET_ID: '1Ppz7b-lHrgU9eWg5ieaTiIsENZfyY57YdoJW2oZwT-U', // El ID est√° en la URL de tu hoja
  SHEET_NAME: 'Respuestas de formulario 1', // Nombre de la pesta√±a en tu hoja
  GEMINI_API_KEY: 'AIzaSyCZ3flRnFRo7dCVrFc2XJVv9FB6vLK-K6Y', // Tu clave de API de Google
  GEMINI_MODEL: 'gemini-1.5-flash', // Modelo m√°s econ√≥mico y r√°pido (disponible actualmente)
  // Alternativas de modelo disponibles:
  // 'gemini-1.5-pro' - M√°s potente pero m√°s caro
  // 'gemini-1.0-pro' - Versi√≥n anterior estable
};

// ============================================
// FUNCI√ìN PRINCIPAL - MANEJO DE LA APLICACI√ìN WEB
// ============================================

function doGet() {
  return HtmlService.createTemplateFromFile('index')
    .evaluate()
    .setTitle('Somma - Tu Coach Virtual SMART')
    .addMetaTag('viewport', 'width=device-width, initial-scale=1')
    .setXFrameOptionsMode(HtmlService.XFrameOptionsMode.ALLOWALL);
}

// ============================================
// PROCESAMIENTO DE META CON IA
// ============================================

function procesarMeta(datosFormulario) {
  try {
    const { nombre, matricula, metaOriginal } = datosFormulario;
    
    // Validaci√≥n b√°sica
    if (!nombre || !matricula || !metaOriginal) {
      throw new Error('Por favor completa todos los campos');
    }
    
    console.log('Procesando meta para:', nombre, matricula);
    
    // Llamar a Gemini para generar la meta SMART
    const metaSMART = generarMetaSMART(metaOriginal, nombre);
    
    // Guardar en Google Sheets
    guardarEnSheets({
      nombre,
      matricula,
      metaOriginal,
      metaSMART
    });
    
    // Retornar la meta SMART generada
    return {
      success: true,
      metaSMART: metaSMART,
      nombre: nombre
    };
    
  } catch (error) {
    console.error('Error en procesarMeta:', error);
    return {
      success: false,
      error: error.toString()
    };
  }
}

// ============================================
// INTEGRACI√ìN CON GEMINI API
// ============================================

function generarMetaSMART(metaOriginal, nombreEstudiante) {
  // Prompt optimizado para Gemini
  const prompt = `# ROL Y OBJETIVO
Act√∫a como "Somma", un coach virtual experto en la metodolog√≠a SMART para estudiantes. Tu nombre se inspira en la idea de que los grandes logros son la suma de peque√±os pasos. Tu √∫nico objetivo es tomar la meta inicial de un estudiante y, a trav√©s de un proceso de preguntas simulado, devolverle una meta bien estructurada en un texto √∫nico, claro y motivador.

# TONO Y ESTILO
Tu tono es cercano, paciente y sobre todo, empoderador. Utiliza un lenguaje que inspire acci√≥n. Formula preguntas socr√°ticas para guiar, nunca des tu opini√≥n ni completes las ideas por el estudiante. Utiliza emojis con moderaci√≥n para dar calidez üòäüí™.

# PRINCIPIO FUNDAMENTAL
Una meta clara + un primer paso que se pueda dar hoy.

# INFORMACI√ìN DEL ESTUDIANTE
Nombre: ${nombreEstudiante}
Meta original: "${metaOriginal}"

# INSTRUCCIONES DE FORMATO
Genera una respuesta COMPLETA siguiendo EXACTAMENTE este formato:

1. **SALUDO INICIAL:** 
   Saluda al estudiante por su nombre y pres√©ntate brevemente como Somma.

2. **AN√ÅLISIS DE LA META (SIMULADO):** 
   Para cada letra de S-M-A-R-T, reformula la meta inicial del estudiante:
   
   üéØ **S - Espec√≠fico:** Convierte la idea vaga en algo concreto y claro.
   
   üìä **M - Medible:** Prop√≥n una forma clara de medir el √©xito con n√∫meros o indicadores.
   
   ‚úÖ **A - Alcanzable:** Eval√∫a si es realista y sugiere ajustes si es necesario.
   
   üí° **R - Relevante:** Conecta la meta con un "para qu√©" m√°s grande del estudiante.
   
   üóìÔ∏è **T - Con Plazo:** Asigna una fecha l√≠mite clara y espec√≠fica.

3. **PLAN DE ACCI√ìN INMEDIATO:**
   
   **Primer Peque√±o Paso:** Define una acci√≥n s√∫per concreta que pueda hacer en las pr√≥ximas 24 horas.
   
   **Anticipando Obst√°culos:** Identifica un posible obst√°culo y un plan simple para superarlo.

4. **RESUMEN FINAL: TU META SOMMA**
   
   üìù **Tu Meta SMART Completa:**
   [Presenta la meta final en una frase clara y poderosa que incluya todos los elementos SMART]
   
   ‚úì Checklist de componentes:
   - [ ] Espec√≠fico: [elemento espec√≠fico]
   - [ ] Medible: [c√≥mo se medir√°]
   - [ ] Alcanzable: [por qu√© es realista]
   - [ ] Relevante: [conexi√≥n con objetivo mayor]
   - [ ] Temporal: [fecha l√≠mite]

5. **CIERRE:** 
   Termina con una frase corta de impulso personalizada.

IMPORTANTE: Mant√©n un tono motivador y emp√°tico. Usa ejemplos concretos basados en la meta del estudiante.`;

  try {
    // URL del endpoint de Gemini (v1beta es la versi√≥n correcta)
    const url = `https://generativelanguage.googleapis.com/v1beta/models/${CONFIG.GEMINI_MODEL}:generateContent?key=${CONFIG.GEMINI_API_KEY}`;
    
    // Configuraci√≥n de la solicitud
    const payload = {
      contents: [{
        parts: [{
          text: prompt
        }]
      }],
      generationConfig: {
        temperature: 0.7, // Balance entre creatividad y coherencia
        topK: 40,
        topP: 0.95,
        maxOutputTokens: 2048, // Suficiente para una respuesta completa
        stopSequences: []
      },
      safetySettings: [
        {
          category: "HARM_CATEGORY_HARASSMENT",
          threshold: "BLOCK_NONE"
        },
        {
          category: "HARM_CATEGORY_HATE_SPEECH",
          threshold: "BLOCK_NONE"
        },
        {
          category: "HARM_CATEGORY_SEXUALLY_EXPLICIT",
          threshold: "BLOCK_NONE"
        },
        {
          category: "HARM_CATEGORY_DANGEROUS_CONTENT",
          threshold: "BLOCK_NONE"
        }
      ]
    };
    
    const options = {
      method: 'post',
      headers: {
        'Content-Type': 'application/json'
      },
      payload: JSON.stringify(payload),
      muteHttpExceptions: true
    };
    
    // Llamada a la API
    const response = UrlFetchApp.fetch(url, options);
    const responseData = JSON.parse(response.getContentText());
    
    // Manejo de errores de la API
    if (responseData.error) {
      console.error('Error de Gemini API:', responseData.error);
      throw new Error('Error al generar la meta SMART: ' + responseData.error.message);
    }
    
    // Verificar que hay contenido en la respuesta
    if (!responseData.candidates || !responseData.candidates[0] || !responseData.candidates[0].content) {
      console.error('Respuesta inesperada de Gemini:', responseData);
      throw new Error('No se recibi√≥ una respuesta v√°lida de Gemini');
    }
    
    // Extraer el texto de la respuesta
    const respuestaTexto = responseData.candidates[0].content.parts[0].text;
    
    // Log para debugging (opcional)
    console.log('Respuesta generada exitosamente, longitud:', respuestaTexto.length);
    
    return respuestaTexto;
    
  } catch (error) {
    console.error('Error llamando a Gemini:', error);
    
    // Respuesta de fallback si Gemini falla
    return `¬°Hola ${nombreEstudiante}! Soy Somma üòä

He recibido tu meta: "${metaOriginal}"

Aunque hubo un problema t√©cnico al procesar tu meta completa, aqu√≠ te dejo un plan inicial:

**üéØ Tu Plan de Acci√≥n Inicial:**
‚Ä¢ **Espec√≠fico:** Define exactamente qu√© quieres lograr
‚Ä¢ **Medible:** Establece c√≥mo medir√°s tu progreso (n√∫meros, porcentajes, frecuencia)
‚Ä¢ **Alcanzable:** Aseg√∫rate de que sea realista en tu contexto actual
‚Ä¢ **Relevante:** Conecta esta meta con tus objetivos acad√©micos o personales m√°s grandes
‚Ä¢ **Temporal:** Ponle una fecha l√≠mite clara (sugiero empezar con 30 d√≠as)

**üí™ Primer Paso Hoy:**
Escribe tu meta en una hoja con el mayor detalle posible y comp√°rtela con alguien de confianza que pueda apoyarte.

**üöÄ Anticipando Obst√°culos:**
Si sientes que no tienes tiempo, recuerda: 15 minutos diarios son suficientes para empezar.

¬°Cada gran logro es la suma de peque√±os pasos consistentes! T√∫ puedes lograrlo üí™`;
  }
}

// ============================================
// GUARDAR EN GOOGLE SHEETS
// ============================================

function guardarEnSheets(datos) {
  try {
    const sheet = SpreadsheetApp.openById(CONFIG.SPREADSHEET_ID)
                                .getSheetByName(CONFIG.SHEET_NAME);
    
    if (!sheet) {
      throw new Error('No se encontr√≥ la hoja especificada. Verifica el nombre.');
    }
    
    // Preparar la fila con los datos
    const marcaTemporal = new Date();
    const fila = [
      marcaTemporal,           // Marca temporal
      datos.nombre,            // Nombre
      datos.matricula,         // Matr√≠cula
      datos.metaOriginal,      // Meta Original
      datos.metaSMART          // Meta SMART (Generada por IA)
    ];
    
    // Agregar la fila al final de la hoja
    sheet.appendRow(fila);
    
    console.log('Datos guardados exitosamente en Sheets');
    
    // Opcional: Trackear el uso para monitoreo de costos
    trackearUso();
    
  } catch (error) {
    console.error('Error guardando en Sheets:', error);
    // No lanzamos el error para que el usuario a√∫n pueda ver su meta SMART
    // aunque falle el guardado en Sheets
  }
}

// ============================================
// TRACKING DE USO (OPCIONAL)
// ============================================

function trackearUso() {
  try {
    // Obtener o crear la hoja de tracking
    const spreadsheet = SpreadsheetApp.openById(CONFIG.SPREADSHEET_ID);
    let trackingSheet;
    
    try {
      trackingSheet = spreadsheet.getSheetByName('Tracking_Uso');
    } catch (e) {
      // Si no existe, la creamos
      trackingSheet = spreadsheet.insertSheet('Tracking_Uso');
      trackingSheet.getRange(1, 1, 1, 5).setValues([
        ['Fecha', 'Consultas del D√≠a', 'Tokens Entrada Estimados', 'Tokens Salida Estimados', 'Costo Estimado USD']
      ]);
    }
    
    const hoy = new Date();
    const fechaHoy = Utilities.formatDate(hoy, Session.getScriptTimeZone(), 'yyyy-MM-dd');
    
    // Buscar si ya existe una entrada para hoy
    const data = trackingSheet.getDataRange().getValues();
    let filaHoy = -1;
    
    for (let i = 1; i < data.length; i++) {
      if (data[i][0] && Utilities.formatDate(new Date(data[i][0]), Session.getScriptTimeZone(), 'yyyy-MM-dd') === fechaHoy) {
        filaHoy = i + 1;
        break;
      }
    }
    
    if (filaHoy === -1) {
      // Crear nueva fila para hoy
      const tokensEntrada = 800; // Estimado por consulta
      const tokensSalida = 700; // Estimado por consulta
      // Gemini 1.5 Flash pricing: $0.075 por mill√≥n de tokens entrada, $0.30 por mill√≥n salida
      const costoEstimado = (tokensEntrada * 0.000000075) + (tokensSalida * 0.0000003); 
      
      trackingSheet.appendRow([
        hoy,
        1,
        tokensEntrada,
        tokensSalida,
        costoEstimado
      ]);
    } else {
      // Actualizar fila existente
      const consultasActuales = trackingSheet.getRange(filaHoy, 2).getValue() || 0;
      const tokensEntradaActuales = trackingSheet.getRange(filaHoy, 3).getValue() || 0;
      const tokensSalidaActuales = trackingSheet.getRange(filaHoy, 4).getValue() || 0;
      
      const nuevosTokensEntrada = 800;
      const nuevosTokensSalida = 700;
      const nuevoCosto = ((tokensEntradaActuales + nuevosTokensEntrada) * 0.000000075) + 
                        ((tokensSalidaActuales + nuevosTokensSalida) * 0.0000003);
      
      trackingSheet.getRange(filaHoy, 2).setValue(consultasActuales + 1);
      trackingSheet.getRange(filaHoy, 3).setValue(tokensEntradaActuales + nuevosTokensEntrada);
      trackingSheet.getRange(filaHoy, 4).setValue(tokensSalidaActuales + nuevosTokensSalida);
      trackingSheet.getRange(filaHoy, 5).setValue(nuevoCosto);
    }
    
  } catch (error) {
    console.log('No se pudo trackear el uso:', error);
    // No es cr√≠tico, continuamos sin trackear
  }
}

// ============================================
// FUNCI√ìN AUXILIAR PARA CSS
// ============================================

function include(filename) {
  return HtmlService.createHtmlOutputFromFile(filename).getContent();
}

// ============================================
// FUNCI√ìN DE PRUEBA (OPCIONAL)
// ============================================

function probarGemini() {
  // Funci√≥n para probar la conexi√≥n con Gemini directamente desde el editor
  const resultado = generarMetaSMART("Quiero mejorar mis calificaciones", "Juan");
  console.log(resultado);
  return resultado;
}

// ============================================
// LISTAR MODELOS DISPONIBLES (DEBUGGING)
// ============================================

function listarModelosDisponibles() {
  // Funci√≥n √∫til para ver qu√© modelos est√°n disponibles con tu API key
  try {
    const url = `https://generativelanguage.googleapis.com/v1beta/models?key=${CONFIG.GEMINI_API_KEY}`;
    const response = UrlFetchApp.fetch(url);
    const data = JSON.parse(response.getContentText());
    
    console.log("Modelos disponibles:");
    data.models.forEach(model => {
      if (model.supportedGenerationMethods.includes('generateContent')) {
        console.log(`- ${model.name} (Soporta generateContent)`);
      }
    });
    
    return data.models;
  } catch (error) {
    console.error("Error listando modelos:", error);
    return null;
  }
}
